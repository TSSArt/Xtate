<scxml xmlns="http://www.w3.org/2005/07/scxml" xmlns:mid="http://tssart.com/scxml/customaction/mid" version="1.0" datamodel="ecmascript">
  <datamodel>
    <data id="username" />
    <data id="password" />
    <data id="email" />
    <data id="mailKey" />
    <data id="captchaHtml">
      <html xmlns="">
        <head>
          <script src="https://www.google.com/recaptcha/api.js" async="" defer=""></script>
          <script type="text/javascript">
            function ok(){document.getElementById("frm").submit();}
          </script>
        </head>
        <body>
          <form id="frm" action="" method="POST">
            <div class="g-recaptcha" data-sitekey="6Lcr4RYTAAAAAN_gTioJ2RIkdiHu6IfDq870-2bO" data-callback="ok"></div>
          </form>
        </body>
      </html>
    </data>
  </datamodel>

  <initial>
    <transition target="Idle">
      <mid:storage location="username" operation="get" variable="username" />
      <mid:storage location="password" operation="get" variable="password" />
      <mid:storage location="email" operation="get" variable="email" />
      <mid:storage location="mailKey" operation="get" variable="mailKey" />
    </transition>
  </initial>

  <state id="Idle">
    <transition event="authenticate" target="Authenticate" />
    <transition event="emergency" />
    <transition event="maintenance" />
  </state>

  <state id="Authenticate" initial="Auth-Login">
    <datamodel>
      <data id="origin" />
      <data id="originType" />
      <data id="captureEmail" />
    </datamodel>

    <onentry>
      <assign location="origin" expr="_event.origin" />
      <assign location="origintype" expr="_event.origintype" />
    </onentry>

    <state id="Auth-Login">
      <transition cond="!username" target="Auth-AskCredentials" />

      <invoke id="AuthLogin" src="https://test.tssart.com/wp-login.php" type="http">
        <param name="method" expr="'post'" />
        <param name="autoRedirect" expr="false" />
        <param name="contentType" expr="'application/x-www-form-urlencoded'" />
        <content
          expr="[
                   { name: 'log', value: username }, 
                   { name: 'pwd', value: password }, 
                   { name: 'g-recaptcha-response', value: recaptchaResponse }, 
                   { name: 'redirect_to', value: '/wp-admin/' }, 
                   { name: 'wp-submit', value: 'Log In' },
                   { name: 'testcookie', value: '1' }
                ]" />
      </invoke>

      <transition event="done.invoke.AuthLogin" cond="_event.data.statusCode == 302" target="Auth-LoggedIn" />
      <transition event="done.invoke.AuthLogin" target="Auth-AskCredentials" />
    </state>

    <state id="Auth-AskCredentials">
      <datamodel>
        <data id="askCredentialsSendId" />
      </datamodel>
      
      <onentry>
        <send idlocation="askCredentialsSendId" type="http" target="http://localhost:5000/dialog" event="show">
          <param name="id" location="askCredentialsSendId" />
          <param name="event" expr="'AskCredentialsDone'"/>
          <param name="type" expr="'input'"/>
          <param name="content" expr="({
            'controls': [
              { name: 'Username', location: 'username', type: 'input' },
              { name: 'Password', location: 'password' , type: 'password' },
              { name: 'Capture Email', location: 'captureEmail' , type: 'checkbox' },
              { name: 'Submit', event: 'submit' , type: 'button' },
              { name: 'Register New', event: 'signup' , type: 'button' }]
          })" />
        </send>
      </onentry>

      <onexit>
        <send type="http" target="http://localhost:5000/dialog" event="cancel"><param name="id" location="askCredentialsSendId" /></send>
      </onexit>

      <transition event="AskCredentialsDone.submit" target="Auth-Login">
        <assign location="username" expr="_event.data.parameters.username" />
        <assign location="password" expr="_event.data.parameters.password" />
        <assign location="captureEmail" expr="_event.data.parameters.captureEmail" />
      </transition>

      <transition event="AskCredentialsDone" target="Auth-Cancel" />
    </state>

    <state id="Auth-CaptureEmail">
      <transition cond="!captureEmail" target="Auth-OK" />

      <transition target="Auth-OK">
        <assign location="captureEmail" expr="false" />
      </transition>
    </state>

    <final id="Auth-LoggedIn">
      <onentry xmlns:mid="http://tssart.com/scxml/customaction/mid">
        <mid:storage location="username" operation="set" variable="username" />
        <mid:storage location="password" operation="set" variable="password" />
        <send typeexpr="origintype" targetexpr="origin" event="authenticate.ok">
          <param name="cookies" expr="_event.data.cookies" />
        </send>
      </onentry>

      <transition target="Idle" />
    </final>

    <final id="Auth-Cancel">
      <transition target="Idle" />
    </final>
  </state>

  <state id="SignUp" initial="CreateEmail">
    <datamodel>
      <data id="recaptchaResponse" />
      <data id="emailContent" />
      <data id="setPasswordUrl" />
      <data id="resetPasswordKey" />
      <data id="cookies" />
    </datamodel>

    <state id="CreateEmail">
      <invoke src="http://mid.dev.tssart.com/MailServer/Web2/api/Mail" type="http">
        <param name="method" expr="'post'" />
        <param name="accept" expr="'application/json'" />
        <finalize>
          <assign location="email" expr="_event.data.content.Email" />
        </finalize>
      </invoke>

      <transition event="done.invoke.CreateEmail" target="RegisterCaptcha" />
    </state>

    <state id="RegisterCaptcha">
      <datamodel>
        <data id="registerCaptchaSendId" />
      </datamodel>

      <onentry>
        <mid:random location="registerCaptchaSendId" generate="guid" />
        <send type="http" target="http://localhost:5000/captcha" event="show">
          <param name="id" expr="registerCaptchaSendId" />
          <param name="type" expr="'browser'" />
          <param name="event" expr="'RegisterCaptchaSubmitted'" />
          <param name="source" expr="'https://test.tssart.com/wp-login.php?action=register'" />
          <param name="content" expr="captchaHtml" />
        </send>
        <send id="CancelRegisterCaptcha" event="CancelRegisterCaptcha" type="scxml" targetexpr="'#_scxml_' + _sessionid" delay="30s" />
      </onentry>

      <onexit>
        <send type="http" target="http://localhost:5000/captcha" event="cancel"></send>
        <cancel sendid="CancelRegisterCaptcha" />
      </onexit>

      <transition event="CancelRegisterCaptcha" target="RegisterCaptcha" />

      <transition event="captcha.submitted" target="RegisterAccount">
        <assign location="recaptchaResponse" expr="_event.data.form['g-recaptcha-response']" />
      </transition>
    </state>

    <state id="RegisterAccount">
      <onentry>
        <storage xmlns="http://tssart.com/scxml/customaction/mid" location="username" operation="create" template="userid" rule="[a-z0-9]{1,20}" />
      </onentry>

      <invoke src="https://test.tssart.com/wp-login.php?action=register" type="http">
        <param name="method" expr="'post'" />
        <param name="autoRedirect" expr="false" />
        <param name="contentType" expr="'application/x-www-form-urlencoded'" />
        <param name="form"
               expr="[
                       { name: 'user_login', value: username }, 
                       { name: 'user_email', value: email }, 
                       { name: 'g-recaptcha-response', value: recaptchaResponse }, 
                       { name: 'redirect_to', value: '' }, 
                       { name: 'wp-submit', value: 'Register' }
                     ]" />
      </invoke>

      <transition event="done.invoke.RegisterAccount" target="RegisterCaptcha" cond="_event.data.statusCode != 302" />
      <transition event="done.invoke.RegisterAccount" target="WaitForEmail" cond="_event.data.statusCode == 302" />
    </state>

    <state id="WaitForEmail">
      <invoke
        srcexpr="'http://mid.dev.tssart.com/MailServer/Web2/api/Mail?lastReceivedOnUtc=2019-01-01&amp;email=' + email"
        type="http">
        <param name="accept" expr="'application/json'" />
        <finalize xmlns:basic="http://tssart.com/scxml/customaction/basic"
                  xmlns:mime="http://tssart.com/scxml/customaction/mime">
          <assign location="emailContent" expr="_event.data.content.EmailEntries[0].ContentRaw" />
          <basic:base64decode source="emailContent" destination="emailContent" />
          <mime:parseEmail source="emailContent" destination="setPasswordUrl"
                           regex="https?\:\/\/[A-Za-z0-9-._@\/]+\?[A-Za-z0-9-._~:?#[\]@!$&amp;&#039;()*+,;=\/]+" />
          <basic:parseUrl source="setPasswordUrl" destination="resetPasswordKey" parameter="key" />
        </finalize>
      </invoke>

      <transition event="done.invoke.WaitForEmail" target="SetPasswordCaptcha" />
    </state>

    <state id="SetPasswordCaptcha">
      <datamodel>
        <data id="id" expr="'cap111'" />
      </datamodel>

      <onentry>
        <send type="http" target="http://localhost:5000/captcha" event="show" namelist="id">
          <param name="url" expr="'https://test.tssart.com/wp-login.php?action=register'" />
          <param name="content" expr="captchaHtml" />
        </send>
        <send id="CancelCaptcha" event="captcha.cancelled" delay="30s" />
      </onentry>

      <onexit>
        <send type="http" target="http://localhost:5000/captcha" event="cancel" namelist="id" />
        <cancel sendid="CancelCaptcha" />
      </onexit>

      <transition event="captcha.cancelled" target="SetPasswordCaptcha" />

      <transition event="captcha.submitted" target="GetCookies">
        <assign location="recaptchaResponse" expr="_event.data.form['g-recaptcha-response']" />
      </transition>
    </state>

    <state id="GetCookies">
      <invoke srcexpr="setPasswordUrl" type="http">
        <param name="method" expr="'get'" />
        <finalize>
          <assign location="cookies" expr="_event.data.cookies" />
        </finalize>
      </invoke>

      <transition event="done.invoke.GetCookies" target="SetPassword" />
    </state>

    <state id="SetPassword">
      <onentry>
        <storage xmlns="http://tssart.com/scxml/customaction/mid" location="password" operation="create"
                 template="password" rule="[a-zA-Z0-9]{16}" />
      </onentry>

      <invoke src="https://test.tssart.com/wp-login.php?action=resetpass" type="http">
        <param name="method" expr="'post'" />
        <param name="autoRedirect" expr="false" />
        <param name="contentType" expr="'application/x-www-form-urlencoded'" />
        <param name="cookies" expr="cookies" />
        <param name="form"
               expr="[
                       { name: 'pass1', value: password }, 
                       { name: 'pass2', value: password }, 
                       { name: 'pw_weak', value: 'on' }, 
                       { name: 'g-recaptcha-response', value: recaptchaResponse }, 
                       { name: 'rp_key', value: resetPasswordKey }, 
                       { name: 'wp-submit', value: 'Reset Password' }
                     ]" />
      </invoke>

      <transition event="done.invoke.SetPassword" target="SetPasswordCaptcha" cond="_event.data.statusCode != 302" />
      <transition event="done.invoke.SetPassword" target="Final" cond="_event.data.statusCode == 302" />
    </state>

    <final id="Final">
      <onentry>
        <log label="username" expr="username" />
        <log label="password" expr="password" />
      </onentry>
    </final>
  </state>
</scxml>